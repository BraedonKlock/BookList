package BestSeller;

import java.time.LocalDate;
import java.util.Scanner;

/* 
 * BookManager is the main driver of the application.
 * It launches the interactive menu and manages user interaction.
 */

public class BookManager 
{	
	private final static String DEFAULT_FILE_NAME = "amazonbooks.csv"; // Default file to load/save
	private final static Scanner scanner = new Scanner(System.in); // Scanner for user input
	private static BookList bookList = new BookList(); // Instance of BookList to operate on books
	
	// Main
	public static void main(String[] args) 
	{		
		try {
			BookManager.manageBookList(); // Start the book manager
		} catch (BookException e) {
			new BookException("Failed to manage book list"); // Catch potential exceptions
		}
	}
	
	// Handles the main menu loop: shows options and calls methods based on user choice
	private static void manageBookList() throws BookException {
		int option;
		do {
			showMenu(); // Display menu options
			try {
				option = Integer.parseInt(scanner.nextLine()); // Get user's option
				switch (option) {
				case 1: BookManager.loadBookList(); break;
				case 2: BookManager.printBookList(); break;
				case 3: BookManager.addbook(); break;
				case 4: BookManager.editBook(); break;
				case 5: BookManager.deleteBook(); break;
				case 6: BookManager.saveBookList(); break;
				case 7: BookManager.searchBook(); break;
				case 8: BookManager.exit(); break;
				default: System.out.println("\n**Invalid option. Try again.**\n"); // Invalid option message
				}
			} catch (NumberFormatException e) {
				throw new BookException("Invalid entry. Enter a number between 1 and 8.");
				option = 0; // Stay in loop if invalid
			}
		} while (option != 8); // Exit loop when user selects option 8
	}
	
	// Displays the main menu options
	public static void showMenu()
	{
		System.out.println("|| Menu - Best Sellers OOP/A1 ||\n"
				+ "|| Team: Andrew Paiva - Braedon Klock ||\n"
				+ "================================\n"
				+ "1. Load Booklist\n"
				+ "2. Show Booklist\n"
				+ "3. Add book\n"
				+ "4. Edit a book\n"
				+ "5. Delete a book\n"
				+ "6. Save booklist\n"
				+ "7. Search in the list\n"
				+ "8. Exit\n"
				+ "Choose an option:");
	}
	
	// Loads a book list from a file entered by the user (or default file)
	public static void loadBookList() throws BookException
	{
		System.out.println("Name of file to create booklist(Type \"Exit\" or press Enter for default file \"amazonbooks.csv\")");
		String fileName = scanner.nextLine();
		
		if(fileName.equals(""))
			fileName = DEFAULT_FILE_NAME; // Use default if nothing is entered
		if (fileName.equalsIgnoreCase("Exit")) {
			System.out.println("\n***Exiting***\n");
			return;
		}
		bookList.loadBookList(fileName); // Load book list from file
	}
	
	// Calls method to print the current book list
	public static void printBookList() throws BookException
	{
		bookList.printBookList();
		System.out.print("\n"); //creates new line for readability
	}
	
	// Adds a new book to the book list, collecting data with validation
	public static void addbook() throws BookException
	{
		// Collect book info from user
		System.out.print("Title: ");
		String title = scanner.nextLine();
		System.out.print("Author(s): ");
		String author = scanner.nextLine();
		System.out.print("Original language: ");
		String language = scanner.nextLine();
		
		// Validate published year
		int published;
		while (true) {
            System.out.print("Year first published: ");
            String input = scanner.nextLine().trim();

            if (input.isEmpty()) {
                System.out.println("\n***Must enter a year***\n");
                continue;
            }

            try {
                published = Integer.parseInt(input);
                int currentYear = LocalDate.now().getYear();

                if (published > currentYear) {
                    System.out.println("\n***Invalid year! Enter year earlier than current year***\n");
                } else {
                    System.out.println("\n***Valid year***\n");
                    break;
                }

            } catch (NumberFormatException e) {
                System.out.println("\n***Input must be a valid number***\n");
            }
        }
		
		// Validate sales
		float sales;
		while (true) {
			System.out.print("Sales in millions: ");
			String input = scanner.nextLine();
			
			if (input.isEmpty()) {
                System.out.println("\n***Must enter a number***\n");
                continue;
			}
			
			try {
				sales = Float.parseFloat(input);
				if (sales < 0) {
					System.out.println("\n***Invalid number. Number must be greater 0 or greater***\n");
				}
				else {
					System.out.println("\n***Valid Number***\n");
					break;
				}
			} catch (NumberFormatException e) {
                System.out.println("\n***Input must be a valid number***\n");
            }
		}
		
		// Collect genre
		System.out.print("Genre: ");
		String genre = scanner.nextLine();
		
		// Assign book index (position in list)
		int index = bookList.bestSellers.size();
		
		// Create and add new book
		Book book = new Book(title, author, language, published, sales, genre, index);
		bookList.addBook(book);
	}
	
	// Edits an existing book
	public static void editBook() throws BookException
	{
		bookList.editBook();
	}
	
	// Deletes a book from the list
	public static void deleteBook() throws BookException
	{
		bookList.deleteBook();
	}
	
	// Saves the current book list to a CSV file
	public static void saveBookList() throws BookException
	{
		bookList.saveBookList();
	}
	
	// Searches the book list by a keyword
	public static void searchBook() throws BookException
	{
		if (bookList.bestSellers.isEmpty()) {
			throw new BookException("\nBooklist is empty...\n");
		}
		
		System.out.println("Enter data you want to search: ");
		String dataToSearch = scanner.nextLine();
		
		bookList.searchBook(dataToSearch);
	}
	
	// Exits the application
	public static void exit()
	{
		System.out.println("***Exiting***");
		scanner.close(); // Closing scanner 
	}
}
